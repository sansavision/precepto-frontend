import { isPlainObject } from "./utils.js";
const defaultTransformer = {
  stringify: (value) => JSON.stringify(value, function replacer(key, val) {
    const ogVal = this[key];
    const transformer = transformers.find((t) => t.stringifyCondition(ogVal));
    if (transformer) {
      return transformer.stringify(ogVal);
    }
    return val;
  }),
  parse: (value) => JSON.parse(value, function parser(key, val) {
    const ogVal = this[key];
    if (isPlainObject(ogVal)) {
      const transformer = transformers.find((t) => t.parseCondition(ogVal));
      if (transformer) {
        return transformer.parse(ogVal);
      }
    }
    return val;
  }),
  encode: (value) => {
    if (Array.isArray(value)) {
      return value.map((v) => defaultTransformer.encode(v));
    }
    if (isPlainObject(value)) {
      return Object.fromEntries(
        Object.entries(value).map(([key, v]) => [
          key,
          defaultTransformer.encode(v)
        ])
      );
    }
    const transformer = transformers.find((t) => t.stringifyCondition(value));
    if (transformer) {
      return transformer.stringify(value);
    }
    return value;
  },
  decode: (value) => {
    if (isPlainObject(value)) {
      const transformer = transformers.find((t) => t.parseCondition(value));
      if (transformer) {
        return transformer.parse(value);
      }
    }
    if (Array.isArray(value)) {
      return value.map((v) => defaultTransformer.decode(v));
    }
    if (isPlainObject(value)) {
      return Object.fromEntries(
        Object.entries(value).map(([key, v]) => [
          key,
          defaultTransformer.decode(v)
        ])
      );
    }
    return value;
  }
};
const createTransformer = (key, check, toValue = (v) => v, fromValue = (v) => v) => ({
  key,
  stringifyCondition: check,
  stringify: (value) => ({ [`$${key}`]: toValue(value) }),
  parseCondition: (value) => Object.hasOwn(value, `$${key}`),
  parse: (value) => fromValue(value[`$${key}`])
});
const transformers = [
  createTransformer(
    // Key
    "undefined",
    // Check
    (v) => v === void 0,
    // To
    () => 0,
    // From
    () => void 0
  ),
  createTransformer(
    // Key
    "date",
    // Check
    (v) => v instanceof Date,
    // To
    (v) => v.toISOString(),
    // From
    (v) => new Date(v)
  ),
  createTransformer(
    // Key
    "error",
    // Check
    (v) => v instanceof Error,
    // To
    (v) => ({ ...v, message: v.message, stack: v.stack, cause: v.cause }),
    // From
    (v) => Object.assign(new Error(v.message), v)
  )
];
export {
  defaultTransformer
};
//# sourceMappingURL=transformer.js.map
